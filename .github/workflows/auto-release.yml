name: Automated Release

on:
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main
    types: [closed]

permissions:
  contents: write
  pull-requests: write

jobs:
  detect-release:
    name: Detect Release Merge
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')
    outputs:
      should_release: ${{ steps.detect.outputs.should_release }}
      version: ${{ steps.detect.outputs.version }}
      
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Detect release merge
        id: detect
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          HEAD_REF="${{ github.head_ref }}"
          
          if [[ "$HEAD_REF" =~ ^release/ ]] && [[ "$PR_TITLE" =~ ^Release[[:space:]]+v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "Release merge detected!"
            echo "should_release=true" >> $GITHUB_OUTPUT
            
            # Extract version from PR title
            VERSION=$(echo "$PR_TITLE" | grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+' | sed 's/v//')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Detected version: $VERSION"
          else
            echo "Not a release merge, skipping release process"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  release:
    name: Execute Release
    runs-on: ubuntu-latest
    needs: detect-release
    if: needs.detect-release.outputs.should_release == 'true'
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          
      - name: Install conventional-changelog
        run: npm install -g conventional-changelog-cli
        
      - name: Update VERSION file
        run: |
          NEW_VERSION="${{ needs.detect-release.outputs.version }}"
          echo "$NEW_VERSION" > VERSION
          echo "Updated VERSION file to $NEW_VERSION"
          
      - name: Generate CHANGELOG
        run: |
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Generate changelog for this release
          conventional-changelog -p conventionalcommits -r 0 -s
          
      - name: Commit version and changelog updates
        run: |
          NEW_VERSION="${{ needs.detect-release.outputs.version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add VERSION CHANGELOG.md
          git commit -m "chore: release v${NEW_VERSION}" || echo "No changes to commit"
          
      - name: Create Git tag
        run: |
          NEW_VERSION="${{ needs.detect-release.outputs.version }}"
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"
          
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Push version updates
        run: |
          git push origin main
          
      - name: Reset release branch
        run: |
          # Reset release/next to main HEAD
          git checkout release/next || git checkout -b release/next
          git reset --hard main
          git push origin release/next --force-with-lease
          
      - name: Comment on PR
        run: |
          NEW_VERSION="${{ needs.detect-release.outputs.version }}"
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/v${NEW_VERSION}"
          
          gh pr comment ${{ github.event.pull_request.number }} --body "ðŸŽ‰ Release v${NEW_VERSION} has been successfully created!

          **Release Information:**
          - **Version**: v${NEW_VERSION}
          - **Release URL**: ${RELEASE_URL}
          - **Build Status**: Cross-platform binaries generated
          - **Branch Status**: release/next reset to main

          The release is now available for download from the releases page."